def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.crashlytics'

// Release signing
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("private/keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    project.logger.info('Signing loaded from local file')
} else if (System.getenv('KEYSTORE_FILE') != null) {
    keystoreProperties.setProperty('keystoreFile', System.getenv('KEYSTORE_FILE'))
    keystoreProperties.setProperty('keystorePassword', System.getenv('KEYSTORE_PASSWORD'))
    keystoreProperties.setProperty('keyAlias', System.getenv('KEY_ALIAS'))
    keystoreProperties.setProperty('keyPassword', System.getenv('KEY_PASSWORD'))
    project.logger.info('Signing loaded from env variables')
} else {
    project.logger.info('No release signing available')
}

// Version Code
// Based on: https://gist.github.com/paramsen/4a92c9230d799caeb3b90897da27a80c
static def generateVersionCode() {
    def versionCodeOffset = 0 // Update to keep compatibility with existing apps
    def result = "git rev-list HEAD --count".execute().text.trim() // Unix
    if (result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim()
    // Windows
    if (result.empty) throw new RuntimeException("Could not generate versionCode")
    return result.toInteger() + versionCodeOffset
}

// Version Name
static def generateVersionName() {
    def result = "git rev-parse --abbrev-ref HEAD".execute().text.trim() // Unix
    if (result.empty) result = "PowerShell -Command git rev-parse HEAD --abbrev-ref".execute().text.trim()
    // Windows
    if (result.empty) throw new RuntimeException("Could not generate versionCode")
    return result.substring(result.lastIndexOf("/") + 1)
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.levinriegner.fluttertemplate"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode generateVersionCode()
        versionName generateVersionName()
    }

    signingConfigs {
        debug {
            storeFile file("../.debug/debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        if (keystoreProperties["keystoreFile"] != null) {
            release {
                storeFile file(keystoreProperties['keystoreFile'])
                storePassword keystoreProperties['keystorePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            manifestPlaceholders.firebasePerformanceLogCatEnabled = true
            firebaseCrashlytics {
                mappingFileUploadEnabled = false
            }
        }
        if (keystoreProperties["keystoreFile"] != null) {
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                // multiDexKeepFile file('multidex-config.txt')
                signingConfig signingConfigs.release
                manifestPlaceholders.firebasePerformanceLogCatEnabled = false
            }
        }
    }

    // Environments
    flavorDimensions "app"
    productFlavors {
        qa {
            dimension "app"
            manifestPlaceholders.applicationLabel = "fluttertemplate QA"
            manifestPlaceholders.dynamicLinksDomain = "fluttertemplateqa.page.link"
            applicationIdSuffix ".qa"
        }
        production {
            dimension "app"
            manifestPlaceholders.applicationLabel = "fluttertemplate"
            manifestPlaceholders.dynamicLinksDomain = "fluttertemplate.page.link"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation("androidx.core:core-ktx:1.9.0")
    // APIs for SplashScreen, including compatibility helpers on devices prior Android 12
    implementation("androidx.core:core-splashscreen:1.0.0")
}